C++를 사용하는 이유는 객체 지향 프로그래밍을 할 수 있기 때문 그러나 C++를 하려면 C의 기초 사항을 잘 알아야 됨 (기본적인 데이터형과 연산자, 제어구조, 구문 규칙을 C언어가 제공하기 때문) C를 배웠다 해서 C++이 쉬워지는 건 전혀 아님  C -> C++로 간다면 과감히 C에 대한 습관을 버려햐 함

절차적 플밍이란 ? 컴퓨터가 수행해야 할 동작들을 명확히 구분하고 그 구분된 동작들을 프로그래밍 언어로 구현

obj 파일은 기계어로 번역된 파일

cout는 씨아웃이라 부름 
cin은 씨인

compile은 소스 코드를 컴파일
build 또는 make는 프로젝트를 구성하는 모든 소스 코드를 컴파일한다 
build all은 프로젝트를 구성하는 모든 소스 코드를 다시 컴파일 함
link는 컴파일 된 소스 코드를 필요한 라이브러리와 결합한다
run 또는 execute는 프로그램을 실햄한다 이전 단계 수행 안 했으면 이전 단계 수행 후 실행
debug는 단계적으로 옵션을 사용해 프로그램 실행


using을 쓰지 않으면 cout, endl 앞에 std::를 무조건 써야 됨
using은 지시자

#inclue <iostream> // 전처리 지시자  i는 입력 o는 출력 

cin, cout을 사용 하려면 이 무조건 선언 해야 됨

.C나.c++이름으로 사양 해도 됨

C++의 입출력 기능을 사용하려면 두 행을 반드시 넣어야 함
#inclue <iostream>

using namespace std;

전처리기 : 컴파일을 하기 전에 소스파일에 대해 미리 어떤 처리를 수행하는 프로그램


endl은 행바꿈



iostream은 입출력 클래스 cout cin은 iostream에 객체다